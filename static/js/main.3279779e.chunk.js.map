{"version":3,"sources":["component/MovieItem.jsx","component/MovieTabs.jsx","component/WishList.jsx","utils/api.js","component/Pagination/Pagination.jsx","container/App.js","serviceWorker.js","index.js"],"names":["MovieItem","state","willWatch","this","props","movie","removeMovie","addMoviesToWillWatch","removeMovieFromWillWatch","key","id","className","src","poster_path","title","class","vote_average","type","onClick","setState","bind","React","Component","MovieTabs","sortBy","updateSortBy","handlerClick","value","setClassActive","WishList","item","API_URL","API_KEY_3","Pagination","pages","nextPage","currentPage","pageLinks","i","active","push","href","App","getmMovies","fetch","then","response","json","data","movies","results","totalPages","total_pages","totalResults","total_results","console","log","updateMovies","filter","updateMoviesWillWatch","moviesWillWatch","pageNumber","page","prevProps","prevState","numberPages","Math","floor","map","length","curentPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3279779e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MovieItem extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      willWatch: false,\r\n  \r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const {movie, removeMovie, addMoviesToWillWatch, removeMovieFromWillWatch} =  this.props; \r\n    return( \r\n          <div key={movie.id} className={'movie__item'}>\r\n             <div className={'movie__poster'}>\r\n               <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}/>\r\n             </div>\r\n             <h1 className={'movie__title'}>{movie.title}</h1>\r\n             <span className={'movie__rank'}><i class=\"fab fa-imdb\"></i> {movie.vote_average}</span>\r\n             {this.state.willWatch \r\n             ? \r\n            (<button type='button' className={'willWatch__btn--success'} onClick={() => {this.setState({\r\n              willWatch: false\r\n            });\r\n            removeMovieFromWillWatch(movie)}}>Remove Will Watch</button> )\r\n             : \r\n             (<button type='button' className={'willWatch__btn'} onClick={() => {\r\n              this.setState({willWatch: true}); \r\n              addMoviesToWillWatch(movie)}} >Add Will Watch </button>)}\r\n             \r\n             <button className={'movie__btn'} onClick={removeMovie.bind(null, movie)} type='button'>Delete movie</button>\r\n          </div>\r\n        \r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default MovieItem","import React from 'react';\r\n\r\n\r\nclass MovieTabs extends React.Component{\r\n    render(){\r\n        const {sortBy, updateSortBy} = this.props;\r\n        const handlerClick = value => () => {\r\n            updateSortBy(value);\r\n        };\r\n        const setClassActive = value => sortBy === value ? 'active' : '';\r\n        \r\n        return(\r\n            <ul className={'movie__tabs nav nav__pils'}>\r\n                <li className={'nav__item'}>\r\n                    <div className={`nav__link ${setClassActive('popularity.desc')}`} onClick={ handlerClick('popularity.desc')}>Popularity desc</div>\r\n                </li>\r\n                <li className={'nav__item'}>\r\n                    <div className={`nav__link ${setClassActive('revenue.desc')}`}\r\n                    onClick={handlerClick('revenue.desc')}>Revenue desc</div>\r\n                </li>\r\n                <li className={'nav__item'}>\r\n                    <div className={`nav__link ${setClassActive('vote_average.desc')}`} onClick={handlerClick('vote_average.desc')}>Vote average desc</div>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieTabs","import React from 'react';\r\n\r\nconst WishList = props => {\r\n    const {item}= props;\r\n\r\n    return(\r\n        <div key={item.id} className={'wishList'}>\r\n            <h3 className={'wishList__head'}>{item.title}</h3>\r\n            <span className={'movie__rank'}><i class=\"fab fa-imdb\"></i> {item.vote_average}</span>\r\n        </div>\r\n        \r\n        )\r\n    \r\n}\r\n\r\nexport default WishList","export const API_URL = \"https://api.themoviedb.org/3\";\r\n\r\nexport const API_KEY_3 = \"3f4ca4f3a9750da53450646ced312397\";\r\n\r\nexport const API_KEY_4 =\r\n  \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzZjRjYTRmM2E5NzUwZGE1MzQ1MDY0NmNlZDMxMjM5NyIsInN1YiI6IjVhYzlmNWRkOTI1MTQxNjJhZTA1Njk0NiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Fc4f9DVB6pFWh6hIjYe0NCC4pImdmNzDIfi_3Nb3tC4\";\r\n","import React from 'react';\r\nimport './Pagination.css';\r\n\r\n\r\nconst Pagination = props => {\r\n\r\n   const {pages, nextPage, currentPage} = props;\r\n   const pageLinks = [];\r\n\r\n    for(let i = 1; i <= pages + 1; i++){\r\n        let active = currentPage == i ? 'active' : '';\r\n        \r\n        pageLinks.push(<li className={`waves-effect ${active}`} key={i} onClick={() => nextPage(i)}><a href=\"#\">{i}</a></li>)\r\n    }\r\n    return (\r\n        <div className=\"pagination__container\">\r\n            <div className=\"row\">\r\n                <ul className=\"pagination\">\r\n                    { currentPage > 1 ? <li className=\"waves-effect\" onClick={() => nextPage(currentPage - 1)}><a href=\"#!\">Prev</a></li> : ''}\r\n                    {  pageLinks }\r\n                    { currentPage < pages + 1 ? <li className=\"waves-effect\" onClick={() => nextPage(currentPage + 1)}><a href=\"#!\">Next</a></li> : ''} \r\n                </ul>\r\n            </div>        \r\n        </div>\r\n)\r\n}\r\n\r\nexport default Pagination","import React from 'react';\nimport './App.css';\n// import MoviesData from '../MoviesData';\nimport MovieItem from '../component/MovieItem';\nimport MovieTabs from '../component/MovieTabs';\nimport WishList from '../component/WishList';\nimport {API_URL,API_KEY_3} from '../utils/api';\nimport Pagination from '../component/Pagination/Pagination';\n\n\n\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sortBy: 'popularity.desc',\n      totalResults: 0,\n      currentPage: 1,\n      page: 5,\n      totalPages: 0\n  \n      }\n\n      console.log('Constructor');\n  }\n\n componentDidMount() {\n  this.getmMovies();\n   console.log('componentDidMount');\n }\n\n componentDidUpdate(prevProps, prevState){\n   if(prevState.sortBy !== this.state.sortBy){\n    this.getmMovies();\n    console.log('compoDidupdate');\n   }\n }\n\n getmMovies = () => {\n  fetch(`${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sortBy}`).then( response => {\n    return response.json()\n  }).then( data => {\n    \n    this.setState({\n      movies: data.results,\n      totalPages: data.total_pages,\n      totalResults: data.total_results\n    });\n    console.log(data);\n  });\n }\n\n\n  removeMovie = movie => {\n    const updateMovies = this.state.movies.filter(function (item){\n      return item.id !== movie.id;\n    });\n    this.setState({\n      movies: updateMovies\n    });\n  }\n\n  addMoviesToWillWatch = movie => {\n    const updateMoviesWillWatch = [...this.state.moviesWillWatch];\n    updateMoviesWillWatch.push(movie);\n    console.log(updateMoviesWillWatch);\n\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    })\n  }\n\n  removeMovieFromWillWatch = movie => {\n    const updateMoviesWillWatch = this.state.moviesWillWatch.filter( item => {\n      return item.id !== movie.id\n    });\n    this.setState({\n      moviesWillWatch: updateMoviesWillWatch\n    });\n  }\n\n  updateSortBy = value => {\n    this.setState({\n      sortBy: value\n    })\n  }\n\n  nextPage = pageNumber => {\n    fetch(`${API_URL}/discover/movie?api_key=${API_KEY_3}&sort_by=${this.state.sortBy}&page=${pageNumber}`).then( response => {\n      return response.json()\n    }).then( data => {\n      \n      this.setState({\n        movies: data.results,\n        totalPages: data.total_pages,\n        currentPage: pageNumber\n      });\n    });\n  }\n\n\n\n  render(){\n    const numberPages = Math.floor(this.state.totalResults / 20)\n    console.log('render');\n      return( \n      <div className='container'>\n        <MovieTabs sortBy={this.state.sortBy} updateSortBy={this.updateSortBy} />\n        <div className={'movie__wrapper'}>\n          <div className={'movies'}>{this.state.movies.map( movie => {\n          return(\n           <MovieItem removeMovie={this.removeMovie} addMoviesToWillWatch={this.addMoviesToWillWatch}  movie={movie} removeMovieFromWillWatch={this.removeMovieFromWillWatch}  />\n          )\n          })}\n        \n          </div>\n          <div className={'willWatch'}>\n            <p>Will watch: {this.state.moviesWillWatch.length} movies</p>\n            <div>{this.state.moviesWillWatch.map( item => {\n              return <WishList item={item} />\n            })}</div>\n          </div>\n        </div>\n        {this.state.totalResults > 20 ? <Pagination pages={numberPages} nextPage={this.nextPage} currentPage={this.state.curentPage} /> : ''}\n      </div> \n      \n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}